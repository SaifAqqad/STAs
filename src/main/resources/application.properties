spring.freemarker.suffix=.ftl
server.port=80
# Database properties
spring.datasource.url=jdbc:mysql://localhost:3306/stas_db?createDatabaseIfNotExist=true
spring.datasource.username=root
spring.datasource.password=
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.hibernate.ddl-auto=update

# MailDev smtp mail server properties
# https://github.com/maildev/maildev
spring.mail.host=localhost
spring.mail.port=1025
spring.mail.username=noreply@stas.com
spring.mail.properties.mail.smtp.auth=false
spring.mail.properties.mail.smtp.starttls.enable=false

# OAuth 2.0
# GitHub
spring.security.oauth2.client.registration.github.client-id=<secret>
spring.security.oauth2.client.registration.github.client-secret=<secret>
spring.security.oauth2.client.registration.github.scope=user,public_repo
spring.security.oauth2.client.registration.github.redirect-uri={baseUrl}/login/oauth/redirect/{registrationId}
# linkedin
spring.security.oauth2.client.registration.linkedin.client-name=LinkedIn
spring.security.oauth2.client.registration.linkedin.client-id=<secret>
spring.security.oauth2.client.registration.linkedin.client-secret=<secret>
spring.security.oauth2.client.registration.linkedin.client-authentication-method=POST
spring.security.oauth2.client.registration.linkedin.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.linkedin.scope=r_liteprofile,r_emailaddress
spring.security.oauth2.client.registration.linkedin.redirect-uri={baseUrl}/login/oauth/redirect/{registrationId}
spring.security.oauth2.client.provider.linkedin.authorization-uri=https://www.linkedin.com/oauth/v2/authorization
spring.security.oauth2.client.provider.linkedin.token-uri=https://www.linkedin.com/oauth/v2/accessToken
spring.security.oauth2.client.provider.linkedin.user-info-uri=https://api.linkedin.com/v2/me
spring.security.oauth2.client.provider.linkedin.user-name-attribute=id
